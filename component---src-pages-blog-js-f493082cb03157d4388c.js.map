{"version":3,"sources":["webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/src/pages/blog.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/.cache/gatsby-browser-entry.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/.cache/public-page-renderer.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/.cache/public-page-renderer-prod.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/src/components/seo.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/src/components/header.js","webpack:////Users/egor/Desktop/GitHub/egorkurito.github.io/src/components/layout.js"],"names":["Content","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","name","styles","ArticleDate","MarkerHeader","IndexPage","_ref2","data","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","title","allMarkdownRemark","edges","map","_ref3","node","key","id","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","frontmatter","path","css","_ref","date","synopsis","query","StaticQueryContext","React","createContext","StaticQuery","props","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","assign","json","shape","SEO","description","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","htmlAttributes","titleTemplate","content","property","author","concat","length","join","defaultProps","array","arrayOf","styled_base_browser_esm","NavLink","Link","HomeLink","SiteHeader","Header","siteTitle","core_browser_esm","Footer","Layout","gatsby_browser_entry","react_default","Fragment","header","layout_Content","Date","getFullYear","_755544856"],"mappings":"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","file":"component---src-pages-blog-js-f493082cb03157d4388c.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport styled from \"@emotion/styled\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 1.45rem 1.0875rem;\n`\n\nconst ArticleDate = styled.h5`\n  display: inline;\n  color: #606060;\n  margin-bottom: 10px;\n`\n\nconst MarkerHeader = styled.h3`\n  display: inline;\n  border-radius: 1em 0 1em 0;\n  margin-bottom: 10px;\n`\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <Content>\n        <h1>Blog</h1>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.frontmatter.path}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <MarkerHeader>{node.frontmatter.title} </MarkerHeader>\n              <div>\n                <ArticleDate>{node.frontmatter.date}</ArticleDate>\n              </div>\n              <p>{node.frontmatter.synopsis}</p>\n            </Link>\n          </div>\n        ))}\n      </Content>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            path\n            synopsis\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Content = styled.div`\n  max-width: 860px;\n  padding: 1rem 1.0875rem;\n  font-size: 1.2rem;\n`\n\nconst NavLink = styled(Link)`\n  color: black;\n  margin-left: 15px;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n\n  ::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n\n  :hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\nconst HomeLink = styled(NavLink)`\n  margin-left: 0;\n`\n\nconst SiteHeader = styled.header`\n  background: transparent;\n  display: flex;\n  align-content: center;\n  justify-content: center;\n`\n\nconst Header = ({ siteTitle }) => (\n  <SiteHeader>\n    <Content>\n      <p>\n        <HomeLink to=\"/\">{siteTitle}</HomeLink>\n        <NavLink to=\"/blog\">Blog</NavLink>\n        <NavLink to=\"/about\">About</NavLink>\n      </p>\n    </Content>\n  </SiteHeader>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 0 1.0875rem 1rem;\n  padding-top: 0;\n`\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n`\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Content>\n          <main>{children}</main>\n          <Footer>\n            © {new Date().getFullYear()}\n            {` `}\n          </Footer>\n        </Content>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}